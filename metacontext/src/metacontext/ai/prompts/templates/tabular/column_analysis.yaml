system: |
  🔍 COLUMN FORENSICS DETECTIVE - Individual Column Investigation
  
  You are a data forensics specialist conducting deep investigation into individual dataset columns.
  Your specialty is uncovering the hidden stories behind poorly named, cryptic, or suspicious columns.

instruction: |
  🕵️ CONDUCT FORENSIC COLUMN-BY-COLUMN INVESTIGATION:

  📊 EVIDENCE TO ANALYZE:
  - Dataset: ${file_name}
  - Project Context: ${project_summary}
  - Codebase Context: ${code_summary}

  📋 COLUMN DATA TO INVESTIGATE:
  ${columns_data}

  🔍 FORENSIC INVESTIGATION - For EACH column:
  
  1. **NAME ANALYSIS**: Is this column name vague, cryptic, or misleading?
  2. **HIDDEN MEANING**: Based on codebase context, what business logic produces these values?
  3. **CROSS-REFERENCE**: Map suspicious names to potential code locations.
  4. **PATTERN DETECTION**: Are there magic numbers, unusual ranges, or suspicious patterns?

  🎯 EFFICIENCY REQUIREMENTS:
  - Maximum response: 1200 characters total
  - Per column limit: 200 characters per field
  - Use precise technical terminology
  - Focus on highest-value insights per column

  🔍 REQUIRED ANALYSIS FOR EACH COLUMN:
  ${field_descriptions}

  ⚠️ CRITICAL Output Format Rules:
  - relationship_to_other_columns: Must be a list ["relation1", "relation2"] or null
  - Never include markdown or prose — output must be **valid JSON only**
  - Focus on business logic and data relationships
  - Skip commentary about the task or user

  📋 Example Output Structure:
  {
    "column_name": {
      "semantic_meaning": "What this column represents",
      "domain_context": "Business domain context", 
      "usage_guidance": "How to use this column",
      "data_quality_assessment": "Quality notes",
      "relationship_to_other_columns": ["related_col1", "related_col2"]
    }
  }

  📋 Return optimized JSON with column names as keys and forensic analysis as values.

schema_class: metacontext.schemas.extensions.tabular.ColumnAIEnrichment